function [gammaTpH, gammaTmH] = computeGamma(pitchOrder, ...
        dftRange, crossCorrelationVectors)

    nPitches = diff(dftRange(1,:))+1;
    gammaTpH = cell(pitchOrder, 1);
    gammaTmH = cell(pitchOrder, 1);
    if pitchOrder == 1
        a1 = crossCorrelationVectors(2, :);
        a2 = a1;
    else
        a1 = crossCorrelationVectors(2:pitchOrder, :)+...
             [zeros(1,nPitches);...
              crossCorrelationVectors((1:pitchOrder-2)+2, :)];
        a2 = crossCorrelationVectors(2:pitchOrder, :)-...
             [zeros(1,nPitches);...
              crossCorrelationVectors((1:pitchOrder-2)+2, :)];
    end

    for q = 1:pitchOrder 
        nPitches = diff(dftRange(q,:))+1;
        validPitchIndices = 1:nPitches;

        if q == 1
            % compute the cost function for a model of one
            [psi1, phi1, gammaOld1] = computeGammaSingleSinus(...
                crossCorrelationVectors(1:3,validPitchIndices), ...
                a1(1,validPitchIndices), true);
            gammaNew1 = gammaOld1;
            [psi2, phi2, gammaOld2] = computeGammaSingleSinus(...
                crossCorrelationVectors(1:3,validPitchIndices), ...
                a2(1,validPitchIndices), false);
            gammaNew2 = gammaOld2;
        elseif q == 2
            % compute the cost function for a model of two
            [R1, alpha1, gammaNew1] = computeGammaTwoSinus(...
                crossCorrelationVectors(1:5,validPitchIndices), ...
                psi1(validPitchIndices), ...
                gammaOld1(validPitchIndices), true);
            [R2, alpha2, gammaNew2] = computeGammaTwoSinus(...
                crossCorrelationVectors(1:5,validPitchIndices), ...
                psi2(validPitchIndices), ...
                gammaOld2(validPitchIndices), false);
        else
            % compute the cost function for a model of more than two
            [R1, phi1, psi1, alpha1, gammaOld1, gammaNew1] = ...
                computeGammaMultipleSinus(...
                    R1(1:end-1, validPitchIndices), q, ...
                    crossCorrelationVectors(1:2*q+1, validPitchIndices), ...
                    a1(q-1, validPitchIndices), ...
                    phi1(:, validPitchIndices), ...
                    psi1(:, validPitchIndices), ...
                    gammaOld1(:, validPitchIndices), ...
                    gammaNew1(:, validPitchIndices), ...
                    alpha1(validPitchIndices), true);
            [R2, phi2, psi2, alpha2, gammaOld2, gammaNew2] = ...
                computeGammaMultipleSinus(...
                    R2(1:end-1,validPitchIndices), q, ...
                    crossCorrelationVectors(1:2*q+1, validPitchIndices), ...
                    a2(q-1, validPitchIndices), ...
                    phi2(:, validPitchIndices), ...
                    psi2(:, validPitchIndices), ...
                    gammaOld2(:, validPitchIndices), ...
                    gammaNew2(:, validPitchIndices), ...
                    alpha2(validPitchIndices), false);
        end
        gammaTpH{q} = gammaNew1./(ones(q,1)*sqrt(gammaNew1(q,:)));
        gammaTmH{q} = gammaNew2./(ones(q,1)*sqrt(gammaNew2(q,:)));
    end
end

function [psi, phi, gamma] = computeGammaSingleSinus(...
        crossCorrelationVectors, a, hankelMatrixIsAdded)
    R = computeRowsOfToeplitzHankelMatrix(1, 1, ...
        crossCorrelationVectors, hankelMatrixIsAdded);
    psi = 1./R(1, :);
    gamma = psi;
    phi = a.*gamma;
end

function [R, alpha, gamma] = computeGammaTwoSinus(...
        crossCorrelationVectors, psi, gamma, hankelMatrixIsAdded)    
    nPitches = length(psi);
    R = computeRowsOfToeplitzHankelMatrix(2, 2, ...
    	crossCorrelationVectors, hankelMatrixIsAdded);
    alpha = R(1,:).*gamma;
    gamma = [-R(1,:).*psi;ones(1,nPitches)]./...
        (ones(2,1)*(R(2,:)-R(1,:).^2.*psi));
end

function [RNew, phi, psi, alphaNew, gammaOld, gammaNew] = ...
        computeGammaMultipleSinus(ROld, iOrder, ...
        crossCorrelationVectors, a, phi, psi, gammaOld, ...
        gammaNew, alphaOld, hankelMatrixIsAdded)

    nPitches = length(a);
    RNew = computeRowsOfToeplitzHankelMatrix(iOrder, iOrder, ...
        crossCorrelationVectors, hankelMatrixIsAdded);
    lambda = a-sum(ROld.*phi,1);
    mu = -sum(ROld.*psi,1);
    phi = [phi;zeros(1,nPitches)]+(ones(iOrder-1,1)*lambda).*gammaNew;
    psi = [psi;zeros(1,nPitches)]+(ones(iOrder-1,1)*mu).*gammaNew;
    alphaNew = sum(RNew(1:end-1,:).*gammaNew,1);
    b = (ones(iOrder-1,1)*(alphaOld-alphaNew)).*gammaNew+...
        [zeros(1,nPitches);gammaNew(1:iOrder-2,:)]+...
        [gammaNew(2:end,:);zeros(1,nPitches)]-...
        [gammaOld(1:iOrder-2,:);zeros(1,nPitches)]+...
        (ones(iOrder-1,1)*psi(end,:)).*phi-...
        (ones(iOrder-1,1)*phi(end,:)).*psi;
    nu = sum(RNew(1:end-1,:).*b)./gammaNew(end,:);
    gammaOld = gammaNew;
    gammaNew = nan(iOrder,nPitches);
    gammaNew(iOrder,:) = 1./(nu+RNew(iOrder,:));
    gammaNew(1:iOrder-1,:) = (ones(iOrder-1,1)*...
        (gammaNew(iOrder,:)./gammaOld(end,:))).*b;

end

function rowMatrix = computeRowsOfToeplitzHankelMatrix(rowNumber,...
        nColumns, crossCorrelationVectors, hankelMatrixIsAdded)
    if rowNumber == 1
        toeplitzRows = crossCorrelationVectors(1:nColumns,:);
    else
        toeplitzRows = ...
            [flip(crossCorrelationVectors(2:rowNumber,:),1);...
            crossCorrelationVectors(1:nColumns-rowNumber+1,:)];
    end
    hankelRows = crossCorrelationVectors((0:nColumns-1)+...
        rowNumber+2,:);

    if hankelMatrixIsAdded
        rowMatrix = toeplitzRows + hankelRows;
    else
        rowMatrix = toeplitzRows - hankelRows;
    end

end

