function tests = fibonacciIndexTest
    tests = functiontests(localfunctions);
end

% Validate the produced indices
function testReturnedIndex(testCase)
    validFibonacciNoArray = {...
        13,...
        55,...
        2,...
        nan,...
        [2,3,5,8,13],...
        190392490709135,...
        12.9,...
        2.1,...
        linspace(2.0001,3),...
        linspace(13.0001,21,100),...
        linspace(2584.0001,4181,100),...
        linspace(4181.0001,6765,100),...
        55*ones(3,3),...
        };
    expIndexArray = {...
        7,...
        10,...
        3,...
        nan,...
        3:7,...
        70,...
        7,...
        4,...
        4*ones(1,100),...
        8*ones(1,100),...
        19*ones(1,100),...
        20*ones(1,100),...
        10*ones(3,3),...
        };
    invalidFibonacciNoArray = {...
        -55,...
        1i,...
        0,...
        1,...
        inf,...
        -inf,...
        [1,2,3,5,8,13],...
        19039249070913500,...
        };
    fibonacciNoArray = [validFibonacciNoArray, invalidFibonacciNoArray];
    nExpIndexArray = length(expIndexArray);
    nNoArray = length(fibonacciNoArray);
    for iExpIndex = 1:nNoArray
%         iExpIndex
%         fibonacciNoArray{iExpIndex}
        if iExpIndex<=nExpIndexArray
            actIndex = fibonacciIndex(fibonacciNoArray{iExpIndex});
            testCase.assertEqual(actIndex,expIndexArray{iExpIndex});
        else
            testCase.assertError(@()fibonacciIndex(fibonacciNoArray{iExpIndex}),...
                'fibonacciIndex:argChk');
        end
    end
end